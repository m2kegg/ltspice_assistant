import streamlit as st
import plotly.graph_objects as go
from plotly.graph_objects import Figure
import json
from langflow.load import run_flow_from_json
import os
import traceback
import sys

from langchain.agents import initialize_agent, Tool, AgentExecutor
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain_experimental.tools.python.tool import PythonREPLTool
from rag_ltspice import build_knowledge_base, combine_analysis_with_rag, create_sample_circuit_knowledge, rag_enhanced_analysis
from tools_ltspice import analyze_frequency, analyze_transient, analyze_monte_carlo, generate_report
from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import FAISS
from langchain.prompts import PromptTemplate
from langchain.chains import RetrievalQA
from langgraph.prebuilt import create_react_agent

 
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ö–µ–º",
    layout="wide",
    page_icon="üîå",
    initial_sidebar_state="expanded"
)

st.markdown(
    """
    <style>
        .sidebar .sidebar-content {
            background-color: #f0f2f6;
        }
        .main-container {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
        }
        h1 {
            color: #4A90E2;
        }
        .stPlotlyChart {
            background-color: white;
            border-radius: 5px;
            box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.05);
            padding: 10px;
            margin-bottom: 20px;
        }
    </style>
    """,
    unsafe_allow_html=True
)

llm = ChatGoogleGenerativeAI(model="gemini-2.0-flash", api_key="AIzaSyD7zUjKojFcpokb0v_JymHlNP6Pcs97V3U")

knowledge_base_path = "circuit_knowledge_base"
embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")
vectorstore = FAISS.load_local(knowledge_base_path, embeddings, allow_dangerous_deserialization=True)
retrieval_qa_chain = RetrievalQA.from_chain_type(llm=llm, retriever=vectorstore.as_retriever())

# –ü—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞ —Å RAG
prompt_template = PromptTemplate(
    template="""
–¢—ã - AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ö–µ–º.

–ó–∞–¥–∞—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {input}

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å —ç—Ç–æ–π —Ç–µ–º–æ–π: {context}

–£ —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º —Å—Ö–µ–º–∞–º —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É RAG (Retrieval-Augmented Generation).

–¢—ã –º–æ–∂–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞:
1. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º (–∑–∞–ø–∞—Å –ø–æ —Ñ–∞–∑–µ, –∑–∞–ø–∞—Å –ø–æ —É—Å–∏–ª–µ–Ω–∏—é)
2. –ê–Ω–∞–ª–∏–∑ —à—É–º–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
3. –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
4. –ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ê–ß–• –∏ –§–ß–•)
5. –ê–Ω–∞–ª–∏–∑ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–±—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
6. –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç—á–µ—Ç–∞
7. –ü–æ–∏—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π

–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–¥–∞—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ò –≤—Å—ë.
–ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- analyze_noise() –¥–ª—è —à—É–º–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- analyze_transient() –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- analyze_frequency(circuit_name ->  str (–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ LTSpice —Å–æ —Å—Ö–µ–º–æ–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)), frequency_range -> (start_frequency, stop_frequency, counts) (—á–∞—Å—Ç–æ—Ç—ã –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—à—å –≤ –∫–æ—Ä—Ç–µ–∂ –≤ —Å—Ç—Ä–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, (1, 1000000, 100)), parameters (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏) -> —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä - –∑–Ω–∞—á–µ–Ω–∏–µ) –¥–ª—è —á–∞—Å—Ç–æ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- analyze_monte_carlo() –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
- generate_report() –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
- rag_enhanced_analysis() –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
- combine_analysis_with_rag() –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π

–í—Å–µ–≥–¥–∞ –æ–±—ä—è—Å–Ω—è–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º –∏ –¥–æ–ø–æ–ª–Ω—è–π –∏—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.
""",
    input_variables=["input", "context"]
)

tools = [
    Tool(
        name="AnalyzeFrequency",
        func=analyze_frequency,
        description="–ß–∞—Å—Ç–æ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ê–ß–• –∏ –§–ß–•)."
    ),
    Tool(
        name="AnalyzeTransient",
        func=analyze_transient,
        description="–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤."
    ),
    Tool(
        name="AnalyzeMonteCarlo",
        func=analyze_monte_carlo,
        description="–ê–Ω–∞–ª–∏–∑ –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤–ª–∏—è–Ω–∏—è —Ä–∞–∑–±—Ä–æ—Å–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."
    ),
    Tool(
        name="GenerateReport",
        func=generate_report,
        description="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –∞–Ω–∞–ª–∏–∑–∞."
    ),
]

agent_executor = initialize_agent(
    tools=tools,
    llm=llm,
    agent_type="zero-shot-react-description",
    verbose=True,
)

agent = create_react_agent(
    llm,
    [analyze_frequency, analyze_transient, analyze_monte_carlo, generate_report]
)


with st.sidebar:
    st.title("üîå –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ö–µ–º")
    
    agent_type = st.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞:",
        ["–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á", "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã"]
    )
    
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    show_graphs = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏", value=True)
    show_tables = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö", value=True)
    
    plotly_theme = st.selectbox(
        "–¢–µ–º–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤",
        ["plotly", "plotly_white", "plotly_dark", "ggplot2", "seaborn"]
    )


st.title("–ê–Ω–∞–ª–∏–∑ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —Å—Ö–µ–º LTSpice")
tab1, tab2, tab3 = st.tabs(["üì• –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞", "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞", "üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö"])

with tab1:
    st.header("üì• –í–≤–æ–¥ –∑–∞–ø—Ä–æ—Å–∞")
    user_query = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ö–µ–º—ã:",
        height=150,
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å—Ö–µ–º—ã –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –Ω–∞–≥—Ä—É–∑–∫–∞—Ö."
    )
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å—Ö–µ–º—ã (.asc):",
        type=["asc"],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ LTSpice."
    )
    analyze_button = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")
    

with tab2:
    st.header("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
    
    if 'results' not in st.session_state:
        st.info("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.")
    else:
        st.markdown(st.session_state.results)
        
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ PDF",
            data=st.session_state.results.encode('utf-8'),
            file_name="circuit_analysis_report.pdf",
            mime="application/pdf"
        )

with tab3:
    st.header("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    if 'visualization_data' not in st.session_state:
        st.info("–ì—Ä–∞—Ñ–∏–∫–∏ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.")
    else:
        if 'plot_json' in st.session_state.visualization_data:
            plot_data = json.loads(st.session_state.visualization_data['plot_json'])
            ach_fig = Figure(json.loads(plot_data['ach']))
            fch_fig = Figure(json.loads(plot_data['fch']))
            ach_fig.update_layout(template=plotly_theme)
            fch_fig.update_layout(template=plotly_theme)
            st.subheader("–ê–º–ø–ª–∏—Ç—É–¥–Ω–æ-—á–∞—Å—Ç–æ—Ç–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞")
            st.plotly_chart(ach_fig, use_container_width=True)
            st.subheader("–§–∞–∑–æ-—á–∞—Å—Ç–æ—Ç–Ω–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞")
            st.plotly_chart(fch_fig, use_container_width=True)
        
if analyze_button and user_query and uploaded_file:
    with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑..."):
        try:
            file_path = f"./circuits/{uploaded_file.name}"
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            circuit_name = uploaded_file.name.split('.')[0]
            user_query = user_query + f"–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ö–µ–º—ã: {uploaded_file.name}"
            context = retrieval_qa_chain.run(user_query)
            input_message = prompt_template.format(input=user_query, context=context)
            analysis_results = agent_executor.run(input_message)
            rag_results = rag_enhanced_analysis(user_query)
            combined_report = combine_analysis_with_rag(analysis_results, user_query, circuit_name)
            st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            st.text_area("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:", value=combined_report, height=300)

        except Exception as e:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            exc_type, exc_value, exc_traceback = sys.exc_info()
            error_details = traceback.format_exception(exc_type, exc_value, exc_traceback)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –±–ª–æ–∫–µ
            with st.expander("–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ"):
                st.code(''.join(error_details), language="python")
                
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(''.join(error_details))